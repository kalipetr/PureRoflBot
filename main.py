import os
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime

TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

# –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
RULES_LINK = os.getenv("RULES_LINK", "https://t.me/your_chat/42")

# –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ô —á–∞—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞–Ω–∫–µ—Ç (–≤–∞—à ID —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã)
DEFAULT_CHAT_ID = -1002824956071

bot = telebot.TeleBot(TOKEN, parse_mode="HTML")

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã: user_id -> {progress, answers, origin_chat_id}
FORM_STATE = {}

QUESTIONS = [
    "1) –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
    "2) –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?",
    "3) –†–æ—Å—Ç?",
    "4) –ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞? –ï—Å–ª–∏ –∏–∑ –ú–æ—Å–∫–≤—ã, —Ç–æ –∏–∑ –∫–∞–∫–æ–≥–æ —Ä–∞–π–æ–Ω–∞?",
    "5) (–∞ –≤–æ—Ç —Ç—É—Ç –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å —á–µ—Å—Ç–Ω–æ...) –ì–µ—Ç–µ—Ä–æ?"
]

def esc(s: str) -> str:
    return (s or "").replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")

def mention(user) -> str:
    if getattr(user, "username", None):
        return f"@{user.username}"
    first = esc(getattr(user, "first_name", None) or "–£—á–∞—Å—Ç–Ω–∏–∫")
    return f"<a href='tg://user?id={user.id}'>{first}</a>"

def build_deeplink(param: str = "form") -> str:
    # param ‚Äî —Å—Ç—Ä–æ–∫–∞ –¥–æ 64 —Å–∏–º–≤–æ–ª–æ–≤. –ú—ã –ø–µ—Ä–µ–¥–∞—ë–º chat_id –≤ –≤–∏–¥–µ "chat_-100..."
    return f"https://t.me/{bot.get_me().username}?start={param}"

def welcome_keyboard(chat_id: int | None) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup()
    deeplink_param = f"chat_{chat_id}" if chat_id is not None else f"chat_{DEFAULT_CHAT_ID}"
    kb.add(InlineKeyboardButton("üìù –ê–ù–ö–ï–¢–ê", url=build_deeplink(deeplink_param)))
    kb.add(InlineKeyboardButton("üìé –ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞", url=RULES_LINK))
    return kb

def start_form(user_id: int, origin_chat_id: int | None):
    FORM_STATE[user_id] = {"progress": 0, "answers": [], "origin_chat_id": origin_chat_id}

def ask_next_question(user_id: int):
    state = FORM_STATE.get(user_id)
    if not state:
        return
    idx = state["progress"]
    if idx < len(QUESTIONS):
        bot.send_message(user_id, QUESTIONS[idx])
    else:
        publish_form_result(user_id)

def publish_form_result(user_id: int):
    state = FORM_STATE.get(user_id)
    if not state:
        return

    answers = state["answers"]
    origin_chat_id = state.get("origin_chat_id")
    filled = (answers + ["‚Äî"] * len(QUESTIONS))[:len(QUESTIONS)]

    text = (
        "üßæ <b>–ö–æ—Ä–æ—Ç–∫–∞—è –∞–Ω–∫–µ—Ç–∞</b>\n"
        f"–û—Ç: {mention(telebot.types.User(id=user_id, is_bot=False, first_name='–£—á–∞—Å—Ç–Ω–∏–∫'))}\n\n"
        f"<b>{esc(QUESTIONS[0])}</b>\n{esc(filled[0])}\n\n"
        f"<b>{esc(QUESTIONS[1])}</b>\n{esc(filled[1])}\n\n"
        f"<b>{esc(QUESTIONS[2])}</b>\n{esc(filled[2])}\n\n"
        f"<b>{esc(QUESTIONS[3])}</b>\n{esc(filled[3])}\n\n"
        f"<i>–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M')}</i>"
    )

    target_chat = origin_chat_id or DEFAULT_CHAT_ID
    try:
        bot.send_message(int(target_chat), text, disable_web_page_preview=True)
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤ —á–∞—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É –≤ —á–∞—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–±–µ:", disable_web_page_preview=True)
        bot.send_message(user_id, text, disable_web_page_preview=True)

    FORM_STATE.pop(user_id, None)

# ----------------- –•—ç–Ω–¥–ª–µ—Ä—ã -----------------

@bot.message_handler(commands=['start'])
def cmd_start(message: telebot.types.Message):
    """
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç deep-link /start <payload>.
    payload –≤–∞—Ä–∏–∞–Ω—Ç—ã:
      - "chat_<ID>"  -> –Ω–∞—á–∏–Ω–∞–µ–º –∞–Ω–∫–µ—Ç—É –∏ –ø—É–±–ª–∏–∫—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —ç—Ç–æ—Ç —á–∞—Ç
      - –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ –∏–ª–∏ –ø—É—Å—Ç–æ -> –Ω–∞—á–Ω—ë–º –∞–Ω–∫–µ—Ç—É –∏ –æ–ø—É–±–ª–∏–∫—É–µ–º –≤ DEFAULT_CHAT_ID
    """
    payload = None
    if message.text and " " in message.text:
        payload = message.text.split(" ", 1)[1].strip()

    origin_chat_id = None
    if payload and payload.startswith("chat_"):
        chat_id_str = payload[len("chat_"):]
        try:
            origin_chat_id = int(chat_id_str)
        except ValueError:
            origin_chat_id = None

    # –ï—Å–ª–∏ –Ω–µ –ø—Ä–∏—à—ë–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π chat_id ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à DEFAULT_CHAT_ID
    if origin_chat_id is None:
        origin_chat_id = DEFAULT_CHAT_ID

    start_form(message.from_user.id, origin_chat_id)
    bot.reply_to(message, "–ü–æ–≥–Ω–∞–ª–∏! –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ, –ø–æ –ø—É–Ω–∫—Ç–∞–º. –ú–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å ¬´—Å—Ç–æ–ø¬ª –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
    ask_next_question(message.from_user.id)

@bot.message_handler(commands=['help'])
def cmd_help(message):
    bot.reply_to(
        message,
        "–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
        "‚Ä¢ –ö–Ω–æ–ø–∫–∞ –ê–ù–ö–ï–¢–ê –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –õ–° —Å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ deep‚Äëlink\n"
        "‚Ä¢ –ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã –ø—É–±–ª–∏–∫—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∑–∞–¥–∞–Ω–Ω—ã–π —á–∞—Ç\n"
        f"‚Ä¢ –¢–µ–∫—É—â–∏–π —á–∞—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: <code>{DEFAULT_CHAT_ID}</code>"
    )

@bot.message_handler(content_types=['new_chat_members'])
def greet_new_members(message: telebot.types.Message):
    for new_user in message.new_chat_members:
        kb = welcome_keyboard(chat_id=message.chat.id)
        nick = f"@{new_user.username}" if new_user.username else (new_user.first_name or "–≥–æ—Å—Ç—å")
        bot.send_message(
            message.chat.id,
           f"ü•≥ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {nick}! \n"
            "–ó–¥–µ—Å—å —Ä–æ—Ñ–ª—ã, –º–µ–º—ã, —Ñ–ª–∏—Ä—Ç—ã, –ª–∞–π—Ç–æ–≤–æ–µ –æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤–∑–∞–∏–º–Ω–æ–º —É–≤–∞–∂–µ–Ω–∏–∏ –∏ –æ—Ñ—Ñ–ª–∞–π–Ω-—Ç—É—Å–æ–≤–∫–∏, –µ—Å–ª–∏ –ø–æ–π–º–∞–µ—à—å –Ω–∞—à –≤–∞–π–± ‚ù§Ô∏è\n\n"
            "–ù–∞—á–∏–Ω–∞–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –∂–º–∏ <b>–ê–ù–ö–ï–¢–ê!</b> (–ü–æ—Å–ª–µ –ø–µ—Ä–µ–π–¥–∏ –≤ –ª–∏—á–∫—É —Å –±–æ—Ç–æ–º –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã)\n\n"
            "–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ —Ç—ã –±–µ–∑ –Ω–µ–≥–æ - –ù–æ—É–Ω–µ–π–º–∞–º –∑–¥–µ—Å—å –Ω–µ —Ä–∞–¥—ã\n\n"
            "–ò –∂–º–∏ –∫–Ω–æ–º–ø–æ—á–∫—É <b>–ü–†–ê–í–ò–õ–ê</b>, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ.\n\n"
            "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Å—è @nad_wild @zhurina71 @tsvetovaan üíã\n\n"
            "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!",
            reply_markup=kb,
            disable_web_page_preview=True
        )

@bot.message_handler(func=lambda m: m.text and m.text.lower() in ["—Å—Ç–æ–ø", "stop", "cancel"])
def cancel_form(message):
    user_id = message.from_user.id
    if user_id in FORM_STATE:
        FORM_STATE.pop(user_id, None)
        bot.reply_to(message, "–û–∫–µ–π, –∞–Ω–∫–µ—Ç—É –æ—Ç–º–µ–Ω–∏–ª. –•–æ—á–µ—à—å ‚Äî –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ –ø–æ –∫–Ω–æ–ø–∫–µ ¬´–ê–ù–ö–ï–¢–ê¬ª.")
    else:
        bot.reply_to(message, "–°–µ–π—á–∞—Å –∞–Ω–∫–µ—Ç–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞. –ú–æ–∂–µ—à—å –Ω–∞–∂–∞—Ç—å ¬´–ê–ù–ö–ï–¢–ê¬ª –≤ –º–µ–Ω—é.")

@bot.message_handler(func=lambda m: m.chat.type == "private")
def private_flow(message):
    user_id = message.from_user.id
    state = FORM_STATE.get(user_id)
    if not state:
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("üìù –ù–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç—É", url=build_deeplink(f"chat_{DEFAULT_CHAT_ID}")))
        bot.reply_to(message, "–•–æ—á–µ—à—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É?", reply_markup=kb)
        return

    state["answers"].append(message.text.strip())
    state["progress"] += 1
    if state["progress"] < len(QUESTIONS):
        ask_next_question(user_id)
    else:
        bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ! –ü—É–±–ª–∏–∫—É—é –∫—Ä–∞—Ç–∫—É—é –∫–∞—Ä—Ç–æ—á–∫—É –≤ —á–∞—Ç ‚ú®")
        publish_form_result(user_id)

if __name__ == "__main__":
    print(f"Bot is starting polling as @{bot.get_me().username} ...")
    bot.infinity_polling(timeout=30, long_polling_timeout=30, skip_pending=True)
