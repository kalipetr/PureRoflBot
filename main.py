import os
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime

TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≤ –≤–∞—à–µ–º —á–∞—Ç–µ
# –ù–∞–ø—Ä–∏–º–µ—Ä: https://t.me/c/123456789/42  (–∏–ª–∏ –ø—É–±–ª–∏—á–Ω–∞—è: https://t.me/your_chat/42)
RULES_LINK = os.getenv("RULES_LINK", "https://t.me/your_chat/42")

bot = telebot.TeleBot(TOKEN, parse_mode="HTML")

# –ü–∞–º—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–Ω–∫–µ—Ç—ã –≤ RAM (–¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã).
# –ö–ª—é—á: user_id, –∑–Ω–∞—á–µ–Ω–∏–µ: dict(progress, answers, origin_chat_id)
FORM_STATE = {}

QUESTIONS = [
    "1) –ö–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è? (–Ω–∏–∫/–∏–º—è)",
    "2) –ß–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è/–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—à—å—Å—è –≤ –∂–∏–∑–Ω–∏?",
    "3) –û —á—ë–º —Ö–æ—á–µ—à—å –æ–±—â–∞—Ç—å—Å—è –≤ —á–∞—Ç–µ?",
    "4) –ï—Å—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ/—Å–æ—Ü—Å–µ—Ç–∏? (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Ç–∞–∫ –∏ –Ω–∞–ø–∏—à–∏)"
]

def mention(user) -> str:
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ –Ω–∏–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å; –∏–Ω–∞—á–µ ‚Äî –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–µ –∏–º—è
    if user.username:
        return f"@{user.username}"
    return f"<a href='tg://user?id={user.id}'>{telebot.util.escape(user.first_name or '–≥–æ—Å—Ç—å')}</a>"

def welcome_keyboard() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üìù –ê–ù–ö–ï–¢–ê", callback_data="start_form"))
    kb.add(InlineKeyboardButton("üìé –ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞", url=RULES_LINK))
    return kb

def start_form(user_id: int, origin_chat_id: int = None):
    FORM_STATE[user_id] = {
        "progress": 0,
        "answers": [],
        "origin_chat_id": origin_chat_id  # –∫—É–¥–∞ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    }

def ask_next_question(user_id: int):
    state = FORM_STATE.get(user_id)
    if not state:
        return
    progress = state["progress"]
    if progress < len(QUESTIONS):
        bot.send_message(user_id, QUESTIONS[progress])
    else:
        # –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ç–æ–≥ –∏ –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        publish_form_result(user_id)

def publish_form_result(user_id: int):
    state = FORM_STATE.get(user_id)
    if not state:
        return

    answers = state["answers"]
    origin_chat_id = state.get("origin_chat_id")

    # –ó–∞–ø–æ–ª–Ω–∏–º –ø—Ä–æ–ø—É—Å–∫–∏ "‚Äî"
    filled = answers + ["‚Äî"] * (len(QUESTIONS) - len(answers))

    text = (
        "üßæ <b>–ö–æ—Ä–æ—Ç–∫–∞—è –∞–Ω–∫–µ—Ç–∞</b>\n"
        f"–ê–≤—Ç–æ—Ä: {mention(bot.get_chat_member(user_id, user_id).user) if False else ''}"
    )

    # –í Telegram API –≤—ã—à–µ —Å—Ç—Ä–æ—á–∫–∞ —Å get_chat_member –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º–∞ –¥–ª—è –ª–∏—á–∫–∏.
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ last_message, –ø–æ—ç—Ç–æ–º—É —Å–¥–µ–ª–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –∏–Ω–∞—á–µ:
    text = (
        "üßæ <b>–ö–æ—Ä–æ—Ç–∫–∞—è –∞–Ω–∫–µ—Ç–∞</b>\n"
        f"–û—Ç: {mention(telebot.types.User(id=user_id, is_bot=False, first_name='–£—á–∞—Å—Ç–Ω–∏–∫'))}\n\n"
        f"<b>{QUESTIONS[0]}</b>\n{telebot.util.escape(filled[0])}\n\n"
        f"<b>{QUESTIONS[1]}</b>\n{telebot.util.escape(filled[1])}\n\n"
        f"<b>{QUESTIONS[2]}</b>\n{telebot.util.escape(filled[2])}\n\n"
        f"<b>{QUESTIONS[3]}</b>\n{telebot.util.escape(filled[3])}\n\n"
        f"<i>–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M')}</i>"
    )

    # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∏—Å—Ö–æ–¥–Ω—ã–π —á–∞—Ç (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–µ–Ω), –∏–Ω–∞—á–µ ‚Äî –≤ –ª–∏—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if origin_chat_id:
        try:
            bot.send_message(origin_chat_id, text, disable_web_page_preview=True)
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤ —á–∞—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot.send_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É –≤ —á–∞—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–±–µ:", disable_web_page_preview=True)
            bot.send_message(user_id, text, disable_web_page_preview=True)
    else:
        bot.send_message(user_id, text, disable_web_page_preview=True)

    # –ß–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    FORM_STATE.pop(user_id, None)

# ----------------- –•—ç–Ω–¥–ª–µ—Ä—ã -----------------

@bot.message_handler(commands=['start'])
def cmd_start(message):
    kb = welcome_keyboard()
    bot.reply_to(
        message,
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –≤–∞—à –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ—Ç ü§ñ\n\n"
        "–î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∏ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–∏—á–∫–æ–≤ —è:\n"
        "‚Ä¢ –≤–µ—Å–µ–ª–æ –∏—Ö –≤—Å—Ç—Ä–µ—á—É –ø–æ –Ω–∏–∫—É;\n"
        "‚Ä¢ –ø—Ä–µ–¥–ª–æ–∂—É –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É;\n"
        "‚Ä¢ —Å–∫–∏–Ω—É —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–∞–≤–∏–ª–∞.\n\n"
        "–•–æ—á–µ—à—å –æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å? –ñ–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
        reply_markup=kb
    )

@bot.message_handler(commands=['help'])
def cmd_help(message):
    bot.reply_to(
        message,
        "–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
        "1) –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∏ –æ—Ç–∫–ª—é—á–∏—Ç–µ privacy —É BotFather (/setprivacy ‚Üí OFF)\n"
        "2) –Ø –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –Ω–∏–∫—É –∏ –¥–∞—é –∫–Ω–æ–ø–∫–∏ –ê–ù–ö–ï–¢–ê –∏ –ü—Ä–∞–≤–∏–ª–∞\n"
        "3) –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –∑–∞–ø–æ–ª–Ω–∏—Ç –∞–Ω–∫–µ—Ç—É, –æ–ø—É–±–ª–∏–∫—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —á–∞—Ç"
    )

@bot.message_handler(content_types=['new_chat_members'])
def greet_new_members(message):
    for new_user in message.new_chat_members:
        kb = welcome_keyboard()
        nick = f"@{new_user.username}" if new_user.username else (new_user.first_name or "–≥–æ—Å—Ç—å")
        bot.send_message(
            message.chat.id,
            f"ü•≥ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {nick}! \n"
            "–ó–¥–µ—Å—å —Ä–æ—Ñ–ª—ã, –º–µ–º—ã, —Ñ–ª–∏—Ä—Ç—ã, –ª–∞–π—Ç–æ–≤–æ–µ –æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤–∑–∞–∏–º–Ω–æ–º —É–≤–∞–∂–µ–Ω–∏–∏ –∏ –æ—Ñ—Ñ–ª–∞–π–Ω-—Ç—É—Å–æ–≤–∫–∏, –µ—Å–ª–∏ –ø–æ–π–º–∞–µ—à—å –Ω–∞—à –≤–∞–π–± ‚ù§Ô∏è \n \n"
            "–ù–∞—á–∏–Ω–∞–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –∂–º–∏ <b>–ê–ù–ö–ï–¢–ê!</b> (–ü–æ—Å–ª–µ –ø–µ—Ä–µ–π–¥–∏ –≤ –ª–∏—á–∫—É —Å –±–æ—Ç–æ–º –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã) \n \n",
            "–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ —Ç—ã –±–µ–∑ –Ω–µ–≥–æ - –ù–æ—É–Ω–µ–π–º–∞–º –∑–¥–µ—Å—å –Ω–µ —Ä–∞–¥—ã \n \n",
            "–ò –∂–º–∏ –∫–Ω–æ–º–ø–æ—á–∫—É <b>–ü–†–ê–í–ò–õ–ê</b>, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ. \n \n",
            "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Å—è @nad_wild @zhurina71 @tsvetovaan üíã \n \n",
            "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!",
            reply_markup=kb
        )

@bot.callback_query_handler(func=lambda c: c.data == "start_form")
def cb_start_form(call):
    user_id = call.from_user.id
    origin_chat_id = call.message.chat.id  # –∫—É–¥–∞ –ø–æ—Å—Ç–∏—Ç—å –∏—Ç–æ–≥
    # –°—Ç–∞—Ä—Ç –∞–Ω–∫–µ—Ç—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –õ–°
    start_form(user_id, origin_chat_id=origin_chat_id)
    try:
        bot.answer_callback_query(call.id, "–û—Ç–∫—Ä—ã–ª –∞–Ω–∫–µ—Ç—É –≤ –õ–° —Å –±–æ—Ç–æ–º ‚úâÔ∏è")
    except:
        pass
    bot.send_message(
        user_id,
        "–ü–æ–≥–Ω–∞–ª–∏! –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ, –ø–æ –ø—É–Ω–∫—Ç–∞–º. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª ‚Äî –Ω–∞–ø–∏—à–∏ ¬´—Å—Ç–æ–ø¬ª.\n"
        "–ú–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ç–æ–º ‚Äî –Ω–µ –ø–∞—Ä—å—Å—è üòâ"
    )
    ask_next_question(user_id)

@bot.message_handler(func=lambda m: m.text and m.text.lower() in ["—Å—Ç–æ–ø", "stop", "cancel"])
def cancel_form(message):
    user_id = message.from_user.id
    if user_id in FORM_STATE:
        FORM_STATE.pop(user_id, None)
        bot.reply_to(message, "–û–∫–µ–π, –∞–Ω–∫–µ—Ç—É –æ—Ç–º–µ–Ω–∏–ª. –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ê–ù–ö–ï–¢–ê¬ª –µ—â—ë —Ä–∞–∑.")
    else:
        bot.reply_to(message, "–°–µ–π—á–∞—Å –Ω–∏–∫–∞–∫–∞—è –∞–Ω–∫–µ—Ç–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞. –ú–æ–∂–µ—à—å –Ω–∞–∂–∞—Ç—å ¬´–ê–ù–ö–ï–¢–ê¬ª –≤ –º–µ–Ω—é.")

@bot.message_handler(func=lambda m: m.chat.type == "private")
def private_flow(message):
    user_id = message.from_user.id
    state = FORM_STATE.get(user_id)
    if not state:
        # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∞–Ω–∫–µ—Ç—ã ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏–º –Ω–∞—á–∞—Ç—å
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("üìù –ù–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="start_form"))
        bot.reply_to(message, "–•–æ—á–µ—à—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É?", reply_markup=kb)
        return

    # –ó–∞–ø–∏—Å—å –æ—Ç–≤–µ—Ç–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    state["answers"].append(message.text.strip())
    state["progress"] += 1
    if state["progress"] < len(QUESTIONS):
        ask_next_question(user_id)
    else:
        bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ! –ü—É–±–ª–∏–∫—É—é –∫—Ä–∞—Ç–∫—É—é –∫–∞—Ä—Ç–æ—á–∫—É –≤ —á–∞—Ç ‚ú®")
        publish_form_result(user_id)

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    print("Bot is starting polling as @PureRoflGreetingBot ...")
    bot.infinity_polling(timeout=30, long_polling_timeout=30, skip_pending=True)
