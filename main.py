import os
import telebot
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import tempfile
import mimetypes
import pathlib
from contextlib import ExitStack

# --- –ù–æ–≤–æ–µ: yt-dlp –¥–ª—è VK ---
import yt_dlp

# === ENV ===
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

RULES_LINK = os.getenv("RULES_LINK", "https://t.me/your_chat/42")
DEFAULT_CHAT_ID = int(os.getenv("DEFAULT_CHAT_ID", "-1002824956071"))
BOT_FILE_LIMIT = int(os.getenv("BOT_FILE_LIMIT_MB", "45")) * 1024 * 1024  # –ª–∏–º–∏—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –±–æ—Ç–æ–º

bot = telebot.TeleBot(TOKEN, parse_mode="HTML")

# === STATE ===
# –∞–Ω–∫–µ—Ç–∞
FORM_STATE = {}  # user_id -> {progress, answers, origin_chat_id, user_obj}
# cookies –¥–ª—è VK: user_id -> path –∫ cookies.txt (–≤ —Ñ–æ—Ä–º–∞—Ç–µ Netscape)
USER_COOKIES = {}

QUESTIONS = [
    "1) –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
    "2) –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?",
    "3) –†–æ—Å—Ç?",
    "4) –ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞? –ï—Å–ª–∏ –∏–∑ –ú–æ—Å–∫–≤—ã, —Ç–æ –∏–∑ –∫–∞–∫–æ–≥–æ —Ä–∞–π–æ–Ω–∞?",
    "5) (–∞ –≤–æ—Ç —Ç—É—Ç –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å —á–µ—Å—Ç–Ω–æ...) –ì–µ—Ç–µ—Ä–æ?"
]

def esc(s: str) -> str:
    return (s or "").replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")

def mention(user) -> str:
    if getattr(user, "username", None):
        return f"@{user.username}"
    first = esc(getattr(user, "first_name", None) or "–£—á–∞—Å—Ç–Ω–∏–∫")
    return f"<a href='tg://user?id={user.id}'>{first}</a>"

def build_deeplink(param: str = "form") -> str:
    return f"https://t.me/{bot.get_me().username}?start={param}"

def welcome_keyboard(chat_id: int | None) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup()
    deeplink_param = f"chat_{chat_id}" if chat_id is not None else f"chat_{DEFAULT_CHAT_ID}"
    kb.add(InlineKeyboardButton("üìù –ê–ù–ö–ï–¢–ê", url=build_deeplink(deeplink_param)))
    kb.add(InlineKeyboardButton("üìé –ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞", url=RULES_LINK))
    return kb

def start_form(user, origin_chat_id: int | None):
    FORM_STATE[user.id] = {
        "progress": 0,
        "answers": [],
        "origin_chat_id": origin_chat_id or DEFAULT_CHAT_ID,
        "user_obj": user
    }

def ask_next_question(user_id: int):
    state = FORM_STATE.get(user_id)
    if not state:
        return
    idx = state["progress"]
    if idx < len(QUESTIONS):
        bot.send_message(user_id, QUESTIONS[idx])
    else:
        publish_form_result(user_id)

def publish_form_result(user_id: int):
    state = FORM_STATE.get(user_id)
    if not state:
        return
    answers = state["answers"]
    origin_chat_id = state.get("origin_chat_id") or DEFAULT_CHAT_ID
    user_obj = state.get("user_obj")
    user_mention = mention(user_obj) if user_obj else "–£—á–∞—Å—Ç–Ω–∏–∫"
    filled = (answers + ["‚Äî"] * len(QUESTIONS))[:len(QUESTIONS)]
    text = (
        "üßæ <b>–ö–æ—Ä–æ—Ç–∫–∞—è –∞–Ω–∫–µ—Ç–∞</b>\n"
        f"–û—Ç: {user_mention}\n\n"
        f"<b>{esc(QUESTIONS[0])}</b>\n{esc(filled[0])}\n\n"
        f"<b>{esc(QUESTIONS[1])}</b>\n{esc(filled[1])}\n\n"
        f"<b>{esc(QUESTIONS[2])}</b>\n{esc(filled[2])}\n\n"
        f"<b>{esc(QUESTIONS[3])}</b>\n{esc(filled[3])}\n\n"
        f"<b>{esc(QUESTIONS[4])}</b>\n{esc(filled[4])}"
    )
    try:
        bot.send_message(int(origin_chat_id), text, disable_web_page_preview=True)
    except Exception:
        bot.send_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É –≤ —á–∞—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–±–µ:", disable_web_page_preview=True)
        bot.send_message(user_id, text, disable_web_page_preview=True)
    FORM_STATE.pop(user_id, None)

# ----------------- VK DOWNLOADER (—Ç–æ–ª—å–∫–æ –≤ –õ–° —Å –±–æ—Ç–æ–º) -----------------

def _ydl_opts(tmpdir: str, cookies_path: str | None):
    opts = {
        "outtmpl": os.path.join(tmpdir, "%(title).200s.%(ext)s"),
        "restrictfilenames": True,
        "noprogress": True,
        "quiet": True,
        "no_warnings": True,
        "format": "bv*+ba/best/bestaudio/bestvideo",  # –ª—É—á—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ, –±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        "merge_output_format": None,
        "noplaylist": True,
        "geo_bypass": True,
        "nocheckcertificate": True,
    }
    if cookies_path:
        opts["cookiefile"] = cookies_path  # –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    return opts

def ensure_private_chat(message: types.Message) -> bool:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —ç—Ç–æ –õ–°. –ï—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–∞ ‚Äî –¥–∞—ë—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False."""
    if message.chat.type == "private":
        return True
    bot.reply_to(
        message,
        "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ VK –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º.\n"
        f"–û—Ç–∫—Ä–æ–π –º–µ–Ω—è: {build_deeplink('form')}\n"
        "–î–∞–ª—å—à–µ: –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É VK —Å—é–¥–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /vk <—Å—Å—ã–ª–∫–∞>."
    )
    return False

def handle_vk_download(dm_chat_id: int, reply_to_message_id: int | None, url: str, user_id: int):
    cookies_path = USER_COOKIES.get(user_id)
    with tempfile.TemporaryDirectory(prefix="vkdl_") as tmpdir, ExitStack():
        ydl_opts = _ydl_opts(tmpdir, cookies_path)
        info = None
        try:
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(url, download=True)
        except Exception:
            # –ø–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è ‚Äî –¥–æ—Å—Ç–∞—Ç—å –ø—Ä—è–º–æ–π URL
            try:
                with yt_dlp.YoutubeDL({**ydl_opts, "skip_download": True}) as ydl:
                    info = ydl.extract_info(url, download=False)
            except Exception:
                bot.send_message(dm_chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Å VK. –ü—Ä–æ–≤–µ—Ä—å —Å—Å—ã–ª–∫—É/–¥–æ—Å—Ç—É–ø –∏–ª–∏ –æ–±–Ω–æ–≤–∏ cookies.", reply_to_message_id=reply_to_message_id)
                return

        files = []
        if info and "entries" in info and info["entries"]:
            for entry in info["entries"]:
                if entry and "requested_downloads" in entry:
                    for rd in entry["requested_downloads"]:
                        if "filepath" in rd:
                            files.append(rd["filepath"])
        else:
            rds = (info or {}).get("requested_downloads") or []
            for rd in rds:
                if "filepath" in rd:
                    files.append(rd["filepath"])

            if not files:
                # –¥–∞—Ç—å –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
                direct = None
                if info and "url" in info:
                    direct = info["url"]
                else:
                    fmts = (info or {}).get("formats") or []
                    for f in reversed(fmts):
                        if f.get("url"):
                            direct = f["url"]
                            break
                if direct:
                    bot.send_message(dm_chat_id, f"–ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é. –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ:\n{direct}", reply_to_message_id=reply_to_message_id, disable_web_page_preview=True)
                else:
                    bot.send_message(dm_chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª VK.", reply_to_message_id=reply_to_message_id)
                return

        if not files:
            bot.send_message(dm_chat_id, "–§–∞–π–ª—ã VK –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–µ–Ω cookies.txt).", reply_to_message_id=reply_to_message_id)
            return

        for fpath in files:
            p = pathlib.Path(fpath)
            if not p.exists():
                continue
            size = p.stat().st_size
            title = p.stem.replace("_", " ")
            ext = p.suffix.lower()

            if size > BOT_FILE_LIMIT:
                # —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ‚Äî –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –¥–∞—Ç—å –ø—Ä—è–º–æ–π URL —Å cookies
                try:
                    with yt_dlp.YoutubeDL({**_ydl_opts(tmpdir, cookies_path), "skip_download": True}) as ydl:
                        i2 = ydl.extract_info(url, download=False)
                        direct = None
                        if i2 and "url" in i2:
                            direct = i2["url"]
                        else:
                            fmts = (i2 or {}).get("formats") or []
                            for f in reversed(fmts):
                                if f.get("url"):
                                    direct = f["url"]
                                    break
                except Exception:
                    direct = None
                msg = "–§–∞–π–ª –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–æ—Ç–æ–º."
                if direct:
                    msg += f"\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ:\n{direct}"
                bot.send_message(dm_chat_id, msg, reply_to_message_id=reply_to_message_id, disable_web_page_preview=True)
                continue

            mime, _ = mimetypes.guess_type(str(p))
            try:
                with open(p, "rb") as fh:
                    if ext in (".mp4", ".mkv", ".webm", ".mov") or (mime and mime.startswith("video/")):
                        bot.send_video(dm_chat_id, fh, caption=title[:900], reply_to_message_id=reply_to_message_id)
                    elif ext in (".mp3", ".m4a", ".ogg", ".opus", ".webm") or (mime and mime.startswith("audio/")):
                        bot.send_audio(dm_chat_id, fh, caption=title[:900], reply_to_message_id=reply_to_message_id)
                    else:
                        bot.send_document(dm_chat_id, fh, caption=title[:900], reply_to_message_id=reply_to_message_id)
            except Exception:
                bot.send_message(dm_chat_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª ({p.name}).", reply_to_message_id=reply_to_message_id)

# ----------------- –•–≠–ù–î–õ–ï–†–´ -----------------

@bot.message_handler(commands=['start'])
def cmd_start(message: types.Message):
    payload = None
    if message.text and " " in message.text:
        payload = message.text.split(" ", 1)[1].strip()

    origin_chat_id = None
    if payload and payload.startswith("chat_"):
        try:
            origin_chat_id = int(payload[len("chat_"):])
        except ValueError:
            origin_chat_id = None
    if origin_chat_id is None:
        origin_chat_id = DEFAULT_CHAT_ID

    start_form(message.from_user, origin_chat_id)
    if message.chat.type != "private":
        # –í –≥—Ä—É–ø–ø–∞—Ö ‚Äî —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ / –∞–Ω–∫–µ—Ç–∞
        bot.reply_to(message, "–ü–æ–≥–Ω–∞–ª–∏! –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ, –ø–æ –ø—É–Ω–∫—Ç–∞–º. –ú–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å ¬´—Å—Ç–æ–ø¬ª –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
    else:
        # –í –õ–° ‚Äî –ø–æ–¥—Å–∫–∞–∂–µ–º –ø—Ä–æ VK —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
        bot.reply_to(
            message,
            "–ü–æ–≥–Ω–∞–ª–∏! –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ, –ø–æ –ø—É–Ω–∫—Ç–∞–º. –ù–∞–ø–∏—à–∏ ¬´—Å—Ç–æ–ø¬ª –¥–ª—è –æ—Ç–º–µ–Ω—ã.\n\n"
            "üíø –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ VK:\n"
            "‚Ä¢ –ü—Ä–∏—à–ª–∏ —Å—é–¥–∞ —Å—Å—ã–ª–∫—É VK –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /vk <—Å—Å—ã–ª–∫–∞>\n"
            "‚Ä¢ –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—à–ª–∏ —Ñ–∞–π–ª cookies.txt (Netscape —Ñ–æ—Ä–º–∞—Ç)"
        )
    ask_next_question(message.from_user.id)

@bot.message_handler(commands=['help'])
def cmd_help(message):
    bot.reply_to(
        message,
        "–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
        "‚Ä¢ –ê–ù–ö–ï–¢–ê ‚Äî –ø–æ –∫–Ω–æ–ø–∫–µ –≤ –≥—Ä—É–ø–ø–µ, –æ—Ç–≤–µ—á–∞–µ—à—å –≤ –õ–°, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–µ—Ä–Ω—ë—Ç—Å—è –≤ —á–∞—Ç\n"
        f"‚Ä¢ –¢–µ–∫—É—â–∏–π —á–∞—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞–Ω–∫–µ—Ç: <code>{DEFAULT_CHAT_ID}</code>\n\n"
        "VK –≤ –õ–ò–ß–ö–ï:\n"
        "‚Ä¢ /vk <—Å—Å—ã–ª–∫–∞> ‚Äî —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ/–∞—É–¥–∏–æ –∏–∑ VK (–ø—É–±–ª–∏—á–Ω—ã–µ –∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ cookies)\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å cookies.txt (Netscape) –≤ –õ–° ‚Äî –±–æ—Ç –ø—Ä–∏–≤—è–∂–µ—Ç –∫ —Ç–≤–æ–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É"
    )

# --- –ü—Ä–∏—ë–º cookies.txt –≤ –õ–° ---
@bot.message_handler(content_types=['document'])
def on_document(message: types.Message):
    if message.chat.type != "private":
        return  # –ø—Ä–∏–Ω–∏–º–∞–µ–º cookies —Ç–æ–ª—å–∫–æ –≤ –õ–°
    doc = message.document
    fname = (doc.file_name or "").lower()
    if "cookie" not in fname:
        bot.reply_to(message, "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π VK, –ø—Ä–∏—à–ª–∏ —Ñ–∞–π–ª cookies.txt (Netscape —Ñ–æ—Ä–º–∞—Ç).")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º cookies –≤ /tmp –¥–ª—è —ç—Ç–æ–≥–æ user_id
    try:
        file_info = bot.get_file(doc.file_id)
        file_data = bot.download_file(file_info.file_path)
        user_path = f"/tmp/cookies_{message.from_user.id}.txt"
        with open(user_path, "wb") as f:
            f.write(file_data)
        USER_COOKIES[message.from_user.id] = user_path
        bot.reply_to(message, "–§–∞–π–ª cookies –ø—Ä–∏–Ω—è—Ç ‚úÖ\n–¢–µ–ø–µ—Ä—å –ø—Ä–∏—Å—ã–ª–∞–π –ø—Ä–∏–≤–∞—Ç–Ω—É—é VK-—Å—Å—ã–ª–∫—É ‚Äî –ø–æ–ø—Ä–æ–±—É—é —Å–∫–∞—á–∞—Ç—å.")
    except Exception:
        bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å cookies. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

# --- –ö–æ–º–∞–Ω–¥–∞ /vk (–¢–æ–ª—å–∫–æ –≤ –õ–°) ---
@bot.message_handler(commands=['vk'])
def cmd_vk(message: types.Message):
    if not ensure_private_chat(message):
        return
    parts = (message.text or "").split(maxsplit=1)
    if len(parts) < 2:
        bot.reply_to(message, "–ü—Ä–∏—à–ª–∏ —Ç–∞–∫: <code>/vk https://vk.com/video...</code>")
        return
    url = parts[1].strip()
    if "vk.com" not in url:
        bot.reply_to(message, "–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É VK. –ù—É–∂–µ–Ω URL –≤–∏–¥–∞ https://vk.com/...")
        return
    bot.reply_to(message, "–°–µ–∫—É–Ω–¥—É, –∫–∞—á–∞—é –∏–∑ VK‚Ä¶")
    handle_vk_download(message.chat.id, message.message_id, url, message.from_user.id)

# --- –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ VK (–¢–æ–ª—å–∫–æ –≤ –õ–°) ---
@bot.message_handler(func=lambda m: m.chat.type == "private" and bool(m.text) and ("vk.com/" in m.text))
def auto_vk(message: types.Message):
    words = message.text.split()
    url = next((w for w in words if "vk.com/" in w), None)
    if not url:
        return
    bot.reply_to(message, "–õ–æ–≤–ª—é VK ‚Äî –∫–∞—á–∞—é‚Ä¶")
    handle_vk_download(message.chat.id, message.message_id, url, message.from_user.id)

# --- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –≥—Ä—É–ø–ø–µ ---
@bot.message_handler(content_types=['new_chat_members'])
def greet_new_members(message: types.Message):
    for new_user in message.new_chat_members:
        kb = welcome_keyboard(chat_id=message.chat.id)
        nick = mention(new_user)
        extra = {}
        if getattr(message, "is_topic_message", False) and getattr(message, "message_thread_id", None):
            extra["message_thread_id"] = message.message_thread_id
        bot.send_message(
            message.chat.id,
            f"ü•≥ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {nick}! \n"
            "–ó–¥–µ—Å—å —Ä–æ—Ñ–ª—ã, –º–µ–º—ã, —Ñ–ª–∏—Ä—Ç—ã, –ª–∞–π—Ç–æ–≤–æ–µ –æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤–∑–∞–∏–º–Ω–æ–º —É–≤–∞–∂–¥–µ–Ω–∏–∏ –∏ –æ—Ñ—Ñ–ª–∞–π–Ω-—Ç—É—Å–æ–≤–∫–∏, –µ—Å–ª–∏ –ø–æ–π–º–∞–µ—à—å –Ω–∞—à –≤–∞–π–± ‚ù§Ô∏è\n\n"
            "–ù–∞—á–∏–Ω–∞–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –∂–º–∏ <b>–ê–ù–ö–ï–¢–ê!</b> (–ü–æ—Å–ª–µ –ø–µ—Ä–µ–π–¥–∏ –≤ –ª–∏—á–∫—É —Å –±–æ—Ç–æ–º –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã)\n\n"
            "–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ —Ç—ã –±–µ–∑ –Ω–µ–≥–æ - –ù–æ—É–Ω–µ–π–º–∞–º –∑–¥–µ—Å—å –Ω–µ —Ä–∞–¥—ã\n\n"
            "–ò –∂–º–∏ –∫–Ω–æ–º–ø–æ—á–∫—É <b>–ü–†–ê–í–ò–õ–ê</b>, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ.\n\n"
            "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Å—è @nad_wild @zhurina71 @tsvetovaan üíã\n\n"
            "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!",
            reply_markup=kb,
            disable_web_page_preview=True,
            **extra
        )

@bot.chat_member_handler(func=lambda u: True)
def on_chat_member_update(update: types.ChatMemberUpdated):
    try:
        old = update.old_chat_member.status
        new = update.new_chat_member.status
        user = update.new_chat_member.user
        chat_id = update.chat.id
        joined_now = (old in ("left", "kicked")) and (new in ("member", "restricted"))
        if not joined_now:
            return
        kb = welcome_keyboard(chat_id=chat_id)
        nick = mention(user)
        bot.send_message(
            chat_id,
            f"ü•≥ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {nick}! \n"
            "–ó–¥–µ—Å—å —Ä–æ—Ñ–ª—ã, –º–µ–º—ã, —Ñ–ª–∏—Ä—Ç—ã, –ª–∞–π—Ç–æ–≤–æ–µ –æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤–∑–∞–∏–º–Ω–æ–º —É–≤–∞–∂–¥–µ–Ω–∏–∏ –∏ –æ—Ñ—Ñ–ª–∞–π–Ω-—Ç—É—Å–æ–≤–∫–∏, –µ—Å–ª–∏ –ø–æ–π–º–∞–µ—à—å –Ω–∞—à –≤–∞–π–± ‚ù§Ô∏è\n\n"
            "–ù–∞—á–∏–Ω–∞–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –∂–º–∏ <b>–ê–ù–ö–ï–¢–ê!</b> (–ü–æ—Å–ª–µ –ø–µ—Ä–µ–π–¥–∏ –≤ –ª–∏—á–∫—É —Å –±–æ—Ç–æ–º –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã)\n\n"
            "–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ —Ç—ã –±–µ–∑ –Ω–µ–≥–æ - –ù–æ—É–Ω–µ–π–º–∞–º –∑–¥–µ—Å—å –Ω–µ —Ä–∞–¥—ã\n\n"
            "–ò –∂–º–∏ –∫–Ω–æ–º–ø–æ—á–∫—É <b>–ü–†–ê–í–ò–õ–ê</b>, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ.\n\n"
            "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Å—è @nad_wild @zhurina71 @tsvetovaan üíã\n\n"
            "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!",
            reply_markup=kb,
            disable_web_page_preview=True
        )
    except Exception as e:
        print("chat_member handler error:", e)

@bot.message_handler(func=lambda m: m.text and m.text.lower() in ["—Å—Ç–æ–ø", "stop", "cancel"])
def cancel_form(message):
    user_id = message.from_user.id
    if user_id in FORM_STATE:
        FORM_STATE.pop(user_id, None)
        bot.reply_to(message, "–û–∫–µ–π, –∞–Ω–∫–µ—Ç—É –æ—Ç–º–µ–Ω–∏–ª. –•–æ—á–µ—à—å ‚Äî –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ –ø–æ –∫–Ω–æ–ø–∫–µ ¬´–ê–ù–ö–ï–¢–ê¬ª.")
    else:
        bot.reply_to(message, "–°–µ–π—á–∞—Å –∞–Ω–∫–µ—Ç–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞. –ú–æ–∂–µ—à—å –Ω–∞–∂–∞—Ç—å ¬´–ê–ù–ö–ï–¢–ê¬ª –≤ –º–µ–Ω—é.")

@bot.message_handler(func=lambda m: m.chat.type == "private")
def private_flow(message):
    user_id = message.from_user.id
    state = FORM_STATE.get(user_id)
    if not state:
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("üìù –ù–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç—É", url=build_deeplink(f"chat_{DEFAULT_CHAT_ID}")))
        bot.reply_to(message, "–•–æ—á–µ—à—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É?", reply_markup=kb)
        return
    state["answers"].append(message.text.strip())
    state["progress"] += 1
    if state["progress"] < len(QUESTIONS):
        ask_next_question(user_id)
    else:
        bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ! –ü—É–±–ª–∏–∫—É—é –∫—Ä–∞—Ç–∫—É—é –∫–∞—Ä—Ç–æ—á–∫—É –≤ —á–∞—Ç ‚ú®")
        publish_form_result(user_id)

# --- START POLLING ---
if __name__ == "__main__":
    # –ù–∞ –≤—Å—è–∫–∏–π: —É–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫, —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –±—ã–ª polling
    try:
        info = bot.get_webhook_info()
        print("Current webhook url:", getattr(info, "url", ""))
        if info and info.url:
            bot.delete_webhook(drop_pending_updates=True)
            print("Webhook deleted (ok for polling).")
    except Exception as e:
        print("webhook check/delete error:", e)

    print(f"Bot is starting polling as @{bot.get_me().username} ...")
    bot.infinity_polling(
        timeout=30,
        long_polling_timeout=30,
        skip_pending=True,
        allowed_updates=["message", "chat_member", "my_chat_member"]
    )
