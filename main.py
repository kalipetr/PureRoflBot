import os
import re
import telebot
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import tempfile
import mimetypes
import pathlib
from contextlib import ExitStack
from datetime import datetime

import yt_dlp
import redis

# === ENV ===
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

RULES_LINK = os.getenv("RULES_LINK", "https://t.me/your_chat/42")
DEFAULT_CHAT_ID = int(os.getenv("DEFAULT_CHAT_ID", "-1002824956071"))
BOT_FILE_LIMIT = int(os.getenv("BOT_FILE_LIMIT_MB", "45")) * 1024 * 1024

REDIS_URL = os.getenv("REDIS_URL")  # –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è cookies
if not REDIS_URL:
    raise RuntimeError("REDIS_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–ø–æ–¥–∫–ª—é—á–∏ Redis-–ø–ª–∞–≥–∏–Ω –Ω–∞ Railway)")

rds = redis.Redis.from_url(REDIS_URL, decode_responses=True)

bot = telebot.TeleBot(TOKEN, parse_mode="HTML")

# === STATE (–∞–Ω–∫–µ—Ç–∞ –≤ RAM, –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ) ===
FORM_STATE = {}  # user_id -> {progress, answers, origin_chat_id, user_obj}

QUESTIONS = [
    "1) –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
    "2) –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?",
    "3) –†–æ—Å—Ç?",
    "4) –ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞? –ï—Å–ª–∏ –∏–∑ –ú–æ—Å–∫–≤—ã, —Ç–æ –∏–∑ –∫–∞–∫–æ–≥–æ —Ä–∞–π–æ–Ω–∞?",
    "5) (–∞ –≤–æ—Ç —Ç—É—Ç –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å —á–µ—Å—Ç–Ω–æ...) –ì–µ—Ç–µ—Ä–æ?"
]

# ---------- –£—Ç–∏–ª–∏—Ç—ã ----------
def esc(s: str) -> str:
    return (s or "").replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")

def mention(user) -> str:
    if getattr(user, "username", None):
        return f"@{user.username}"
    first = esc(getattr(user, "first_name", None) or "–£—á–∞—Å—Ç–Ω–∏–∫")
    return f"<a href='tg://user?id={user.id}'>{first}</a>"

def build_deeplink(param: str = "form") -> str:
    return f"https://t.me/{bot.get_me().username}?start={param}"

def welcome_keyboard(chat_id: int | None) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup()
    deeplink_param = f"chat_{chat_id}" if chat_id is not None else f"chat_{DEFAULT_CHAT_ID}"
    kb.add(InlineKeyboardButton("üìù –ê–ù–ö–ï–¢–ê", url=build_deeplink(deeplink_param)))
    kb.add(InlineKeyboardButton("üìé –ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞", url=RULES_LINK))
    return kb

# ---------- –ê–Ω–∫–µ—Ç–∞ ----------
def start_form(user, origin_chat_id: int | None):
    FORM_STATE[user.id] = {
        "progress": 0,
        "answers": [],
        "origin_chat_id": origin_chat_id or DEFAULT_CHAT_ID,
        "user_obj": user
    }

def ask_next_question(user_id: int):
    state = FORM_STATE.get(user_id)
    if not state:
        return
    idx = state["progress"]
    if idx < len(QUESTIONS):
        bot.send_message(user_id, QUESTIONS[idx])
    else:
        publish_form_result(user_id)

def publish_form_result(user_id: int):
    state = FORM_STATE.get(user_id)
    if not state:
        return
    answers = state["answers"]
    origin_chat_id = state.get("origin_chat_id") or DEFAULT_CHAT_ID
    user_mention = mention(state.get("user_obj")) if state.get("user_obj") else "–£—á–∞—Å—Ç–Ω–∏–∫"
    filled = (answers + ["‚Äî"] * len(QUESTIONS))[:len(QUESTIONS)]
    text = (
        "üßæ <b>–ö–æ—Ä–æ—Ç–∫–∞—è –∞–Ω–∫–µ—Ç–∞</b>\n"
        f"–û—Ç: {user_mention}\n\n"
        f"<b>{esc(QUESTIONS[0])}</b>\n{esc(filled[0])}\n\n"
        f"<b>{esc(QUESTIONS[1])}</b>\n{esc(filled[1])}\n\n"
        f"<b>{esc(QUESTIONS[2])}</b>\n{esc(filled[2])}\n\n"
        f"<b>{esc(QUESTIONS[3])}</b>\n{esc(filled[3])}\n\n"
        f"<b>{esc(QUESTIONS[4])}</b>\n{esc(filled[4])}"
    )
    try:
        bot.send_message(int(origin_chat_id), text, disable_web_page_preview=True)
    except Exception:
        bot.send_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É –≤ —á–∞—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–±–µ:", disable_web_page_preview=True)
        bot.send_message(user_id, text, disable_web_page_preview=True)
    FORM_STATE.pop(user_id, None)

# ---------- VK (cookies –≤ Redis, —Ä–∞–±–æ—Ç–∞ –¢–û–õ–¨–ö–û –≤ –õ–°) ----------
COOKIES_KEY = "vk:cookies:{uid}"
COOKIES_META = "vk:cookies:{uid}:meta"  # —Ö—Ä–∞–Ω–∏—Ç {'updated_at': iso}

def save_cookies(user_id: int, text: str):
    rds.set(COOKIES_KEY.format(uid=user_id), text)
    rds.hset(COOKIES_META.format(uid=user_id), mapping={"updated_at": datetime.utcnow().isoformat()})

def load_cookies(user_id: int) -> str | None:
    return rds.get(COOKIES_KEY.format(uid=user_id))

def clear_cookies(user_id: int):
    rds.delete(COOKIES_KEY.format(uid=user_id))
    rds.delete(COOKIES_META.format(uid=user_id))

def cookies_status(user_id: int) -> str:
    txt = load_cookies(user_id)
    if not txt:
        return "‚ùå cookies –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
    updated = rds.hget(COOKIES_META.format(uid=user_id), "updated_at") or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    return f"‚úÖ cookies –∑–∞–≥—Ä—É–∂–µ–Ω—ã\n–û–±–Ω–æ–≤–ª–µ–Ω—ã: {updated}"

def _ydl_opts(tmpdir: str, cookies_text: str | None, for_audio_only: bool = False, prefer_ext: str | None = None):
    opts = {
        "outtmpl": os.path.join(tmpdir, "%(title).200s.%(ext)s"),
        "restrictfilenames": True,
        "noprogress": True,
        "quiet": True,
        "no_warnings": True,
        "noplaylist": True,
        "geo_bypass": True,
        "nocheckcertificate": True,
    }
    # –§–æ—Ä–º–∞—Ç—ã:
    if for_audio_only:
        # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ—Å—Ç–∞—Ç—å —á–∏—Å—Ç–æ–µ –∞—É–¥–∏–æ –±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        opts["format"] = "bestaudio/best"
        # –ï—Å–ª–∏ ffmpeg –¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é —á–µ—Ä–µ–∑ –ø–æ—Å—Ç–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä:
        if shutil_which("ffmpeg"):
            ext = prefer_ext or "mp3"
            opts["postprocessors"] = [{
                "key": "FFmpegExtractAudio",
                "preferredcodec": ext,
                "preferredquality": "0"
            }]
        # –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å (opus/webm/m4a –∏ —Ç.–¥.)
    else:
        opts["format"] = "bv*+ba/best/bestaudio/bestvideo"

    # cookies –ø–æ–¥—Å–æ–≤—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if cookies_text:
        cpath = os.path.join(tmpdir, "cookies.txt")
        with open(cpath, "w", encoding="utf-8") as f:
            f.write(cookies_text)
        opts["cookiefile"] = cpath
    return opts

def shutil_which(cmd: str) -> str | None:
    # –ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –±–∏–Ω–∞—Ä–Ω–∏–∫–∞ –≤ PATH
    for path in os.getenv("PATH", "").split(os.pathsep):
        candidate = os.path.join(path.strip('"'), cmd)
        if os.path.isfile(candidate) and os.access(candidate, os.X_OK):
            return candidate
        if os.path.isfile(candidate + ".exe") and os.access(candidate + ".exe", os.X_OK):
            return candidate + ".exe"
    return None

def ensure_private_chat(message: types.Message) -> bool:
    if message.chat.type == "private":
        return True
    bot.reply_to(
        message,
        "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ VK –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º.\n"
        f"–û—Ç–∫—Ä–æ–π –º–µ–Ω—è: {build_deeplink('form')}\n"
        "–î–∞–ª—å—à–µ: –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É VK —Å—é–¥–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /vk <—Å—Å—ã–ª–∫–∞>."
    )
    return False

def extract_first_url(text: str) -> str | None:
    if not text:
        return None
    # –ø—Ä–æ—Å—Ç–µ–Ω—å–∫–∏–π –ø–æ–∏—Å–∫ —Å—Å—ã–ª–∫–∏
    m = re.search(r'(https?://[^\s]+)', text)
    return m.group(1) if m else None

def _collect_downloaded_files(info: dict) -> list[str]:
    files = []
    if not info:
        return files
    if "entries" in info and info["entries"]:
        for entry in info["entries"]:
            if entry and "requested_downloads" in entry:
                for rd in entry["requested_downloads"]:
                    if "filepath" in rd:
                        files.append(rd["filepath"])
    else:
        rds = info.get("requested_downloads") or []
        for rd in rds:
            if "filepath" in rd:
                files.append(rd["filepath"])
    return files

def _get_direct_url(info: dict) -> str | None:
    if not info:
        return None
    if "url" in info:
        return info["url"]
    fmts = info.get("formats") or []
    for f in reversed(fmts):
        if f.get("url"):
            return f["url"]
    return None

def handle_vk_download(dm_chat_id: int, reply_to_message_id: int | None, url: str, user_id: int, audio_only: bool = False):
    cookies_text = load_cookies(user_id)
    with tempfile.TemporaryDirectory(prefix="vkdl_") as tmpdir, ExitStack():
        ydl_opts = _ydl_opts(tmpdir, cookies_text, for_audio_only=audio_only)
        info = None
        try:
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(url, download=True)
        except Exception:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è ‚Äî —Ö–æ—Ç—è –±—ã –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É
            try:
                with yt_dlp.YoutubeDL({**ydl_opts, "skip_download": True}) as ydl:
                    info = ydl.extract_info(url, download=False)
            except Exception:
                bot.send_message(dm_chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Å VK. –ü—Ä–æ–≤–µ—Ä—å —Å—Å—ã–ª–∫—É/–¥–æ—Å—Ç—É–ø –∏–ª–∏ –æ–±–Ω–æ–≤–∏ cookies.", reply_to_message_id=reply_to_message_id)
                return

        files = _collect_downloaded_files(info)
        if not files:
            direct = _get_direct_url(info)
            if direct:
                bot.send_message(dm_chat_id, f"–ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é. –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ:\n{direct}",
                                 reply_to_message_id=reply_to_message_id, disable_web_page_preview=True)
            else:
                bot.send_message(dm_chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª/—Å—Å—ã–ª–∫—É VK.", reply_to_message_id=reply_to_message_id)
            return

        for fpath in files:
            p = pathlib.Path(fpath)
            if not p.exists():
                continue
            size = p.stat().st_size
            title = p.stem.replace("_", " ")
            ext = p.suffix.lower()
            if size > BOT_FILE_LIMIT:
                direct = _get_direct_url(info)
                msg = "–§–∞–π–ª –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–æ—Ç–æ–º."
                if direct:
                    msg += f"\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ:\n{direct}"
                bot.send_message(dm_chat_id, msg, reply_to_message_id=reply_to_message_id, disable_web_page_preview=True)
                continue
            mime, _ = mimetypes.guess_type(str(p))
            try:
                with open(p, "rb") as fh:
                    if audio_only:
                        # –≤—Å–µ–≥–¥–∞ –∫–∞–∫ –∞—É–¥–∏–æ
                        bot.send_audio(dm_chat_id, fh, caption=title[:900], reply_to_message_id=reply_to_message_id)
                    else:
                        if ext in (".mp4", ".mkv", ".webm", ".mov") or (mime and mime.startswith("video/")):
                            bot.send_video(dm_chat_id, fh, caption=title[:900], reply_to_message_id=reply_to_message_id)
                        elif ext in (".mp3", ".m4a", ".ogg", ".opus", ".webm") or (mime and mime.startswith("audio/")):
                            bot.send_audio(dm_chat_id, fh, caption=title[:900], reply_to_message_id=reply_to_message_id)
                        else:
                            bot.send_document(dm_chat_id, fh, caption=title[:900], reply_to_message_id=reply_to_message_id)
            except Exception:
                bot.send_message(dm_chat_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª ({p.name}).", reply_to_message_id=reply_to_message_id)

# ---------- –•—ç–Ω–¥–ª–µ—Ä—ã ----------

@bot.message_handler(commands=['start'])
def cmd_start(message: types.Message):
    payload = None
    if message.text and " " in message.text:
        payload = message.text.split(" ", 1)[1].strip()

    origin_chat_id = None
    if payload and payload.startswith("chat_"):
        try:
            origin_chat_id = int(payload[len("chat_"):])
        except ValueError:
            origin_chat_id = None
    if origin_chat_id is None:
        origin_chat_id = DEFAULT_CHAT_ID

    start_form(message.from_user, origin_chat_id)
    if message.chat.type != "private":
        bot.reply_to(message, "–ü–æ–≥–Ω–∞–ª–∏! –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ, –ø–æ –ø—É–Ω–∫—Ç–∞–º. –ú–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å ¬´—Å—Ç–æ–ø¬ª –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
    else:
        bot.reply_to(
            message,
            "–ü–æ–≥–Ω–∞–ª–∏! –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ, –ø–æ –ø—É–Ω–∫—Ç–∞–º. –ù–∞–ø–∏—à–∏ ¬´—Å—Ç–æ–ø¬ª –¥–ª—è –æ—Ç–º–µ–Ω—ã.\n\n"
            "üíø VK-–∑–∞–≥—Ä—É–∑–∫–∞ (—Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å, –≤ –õ–°):\n"
            "‚Ä¢ /vk <—Å—Å—ã–ª–∫–∞> ‚Äî —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ/–∞—É–¥–∏–æ\n"
            "‚Ä¢ /vk_audio <—Å—Å—ã–ª–∫–∞> ‚Äî —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω FFmpeg ‚Äî –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ mp3)\n"
            "‚Ä¢ /cookies ‚Äî —Å—Ç–∞—Ç—É—Å cookies; /clearcookies ‚Äî –∑–∞–±—ã—Ç—å cookies\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª cookies.txt (Netscape) ‚Äî –ø—Ä–∏–≤—è–∂—É –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Å—Å—ã–ª–æ–∫"
        )
    ask_next_question(message.from_user.id)

@bot.message_handler(commands=['help'])
def cmd_help(message):
    bot.reply_to(
        message,
        "–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
        "‚Ä¢ –ê–ù–ö–ï–¢–ê ‚Äî –ø–æ –∫–Ω–æ–ø–∫–µ –≤ –≥—Ä—É–ø–ø–µ, –æ—Ç–≤–µ—á–∞–µ—à—å –≤ –õ–°, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–µ—Ä–Ω—ë—Ç—Å—è –≤ —á–∞—Ç\n"
        f"‚Ä¢ –¢–µ–∫—É—â–∏–π —á–∞—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞–Ω–∫–µ—Ç: <code>{DEFAULT_CHAT_ID}</code>\n\n"
        "VK (—Ç–æ–ª—å–∫–æ –≤ –õ–°):\n"
        "‚Ä¢ /vk <—Å—Å—ã–ª–∫–∞> ‚Äî —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ/–∞—É–¥–∏–æ\n"
        "‚Ä¢ /vk_audio <—Å—Å—ã–ª–∫–∞> ‚Äî —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ (–ª—É—á—à–µ —Å FFmpeg)\n"
        "‚Ä¢ –ü—Ä–∏—à–ª–∏ cookies.txt (Netscape) ‚Äî –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Å—Å—ã–ª–æ–∫\n"
        "‚Ä¢ /cookies ‚Äî —Å—Ç–∞—Ç—É—Å, /clearcookies ‚Äî —É–¥–∞–ª–∏—Ç—å"
    )

# --- –ö–æ–º–∞–Ω–¥—ã VK (—Ç–æ–ª—å–∫–æ –õ–°) ---
@bot.message_handler(commands=['vk'])
def cmd_vk(message: types.Message):
    if not ensure_private_chat(message):
        return
    url = extract_first_url(message.text)
    if not url or "vk.com" not in url:
        bot.reply_to(message, "–ü—Ä–∏—à–ª–∏ —Ç–∞–∫: <code>/vk https://vk.com/video...</code>")
        return
    bot.reply_to(message, "–°–µ–∫—É–Ω–¥—É, –∫–∞—á–∞—é –∏–∑ VK‚Ä¶")
    handle_vk_download(message.chat.id, message.message_id, url, message.from_user.id, audio_only=False)

@bot.message_handler(commands=['vk_audio'])
def cmd_vk_audio(message: types.Message):
    if not ensure_private_chat(message):
        return
    url = extract_first_url(message.text)
    if not url or "vk.com" not in url:
        bot.reply_to(message, "–ü—Ä–∏—à–ª–∏ —Ç–∞–∫: <code>/vk_audio https://vk.com/video...</code>")
        return
    has_ffmpeg = bool(shutil_which("ffmpeg"))
    if not has_ffmpeg:
        bot.reply_to(message, "FFmpeg –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω ‚Äî –ø—Ä–∏—à–ª—é –ª—É—á—à—É—é –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É –∫–∞–∫ –µ—Å—Ç—å (–±–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏).")
    else:
        bot.reply_to(message, "–ü—Ä–æ–±—É—é –≤—ã—Ç–∞—â–∏—Ç—å –∞—É–¥–∏–æ (FFmpeg)‚Ä¶")
    handle_vk_download(message.chat.id, message.message_id, url, message.from_user.id, audio_only=True)

@bot.message_handler(commands=['cookies'])
def cmd_cookies_status(message: types.Message):
    if message.chat.type != "private":
        return
    bot.reply_to(message, cookies_status(message.from_user.id))

@bot.message_handler(commands=['clearcookies'])
def cmd_clear_cookies(message: types.Message):
    if message.chat.type != "private":
        return
    clear_cookies(message.from_user.id)
    bot.reply_to(message, "–ì–æ—Ç–æ–≤–æ. Cookies —É–¥–∞–ª–µ–Ω—ã.")

# --- –ü—Ä–∏—ë–º cookies.txt –≤ –õ–° ---
@bot.message_handler(content_types=['document'])
def on_document(message: types.Message):
    if message.chat.type != "private":
        return
    doc = message.document
    fname = (doc.file_name or "").lower()
    # –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π .txt, –≥–¥–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –¥–æ–º–µ–Ω—ã VK
    try_txt = fname.endswith(".txt")
    if not try_txt:
        bot.reply_to(message, "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π VK, –ø—Ä–∏—à–ª–∏ —Ñ–∞–π–ª cookies.txt (Netscape —Ñ–æ—Ä–º–∞—Ç).")
        return
    try:
        file_info = bot.get_file(doc.file_id)
        file_data = bot.download_file(file_info.file_path)
        text = file_data.decode("utf-8", errors="ignore")
        # –ª—ë–≥–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–∞ "Netscape" –∏–ª–∏ –¥–æ–º–µ–Ω—ã .vk.com
        if "Netscape" not in text and ".vk.com" not in text and "vk.com" not in text:
            bot.reply_to(message, "–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–µ cookies.txt (Netscape). –ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–π–ª.")
            return
        save_cookies(message.from_user.id, text)
        bot.reply_to(message, "Cookies –ø—Ä–∏–Ω—è—Ç—ã ‚úÖ –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—É—é VK‚Äë—Å—Å—ã–ª–∫—É.")
    except Exception:
        bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª cookies.txt. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

# --- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –≥—Ä—É–ø–ø–µ ---
@bot.message_handler(content_types=['new_chat_members'])
def greet_new_members(message: types.Message):
    for new_user in message.new_chat_members:
        kb = welcome_keyboard(chat_id=message.chat.id)
        nick = mention(new_user)
        extra = {}
        if getattr(message, "is_topic_message", False) and getattr(message, "message_thread_id", None):
            extra["message_thread_id"] = message.message_thread_id
        bot.send_message(
            message.chat.id,
            f"ü•≥ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {nick}! \n"
            "–ó–¥–µ—Å—å —Ä–æ—Ñ–ª—ã, –º–µ–º—ã, —Ñ–ª–∏—Ä—Ç—ã, –ª–∞–π—Ç–æ–≤–æ–µ –æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤–∑–∞–∏–º–Ω–æ–º —É–≤–∞–∂–¥–µ–Ω–∏–∏ –∏ –æ—Ñ—Ñ–ª–∞–π–Ω-—Ç—É—Å–æ–≤–∫–∏, –µ—Å–ª–∏ –ø–æ–π–º–∞–µ—à—å –Ω–∞—à –≤–∞–π–± ‚ù§Ô∏è\n\n"
            "–ù–∞—á–∏–Ω–∞–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –∂–º–∏ <b>–ê–ù–ö–ï–¢–ê!</b> (–ü–æ—Å–ª–µ –ø–µ—Ä–µ–π–¥–∏ –≤ –ª–∏—á–∫—É —Å –±–æ—Ç–æ–º –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã)\n\n"
            "–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ —Ç—ã –±–µ–∑ –Ω–µ–≥–æ - –ù–æ—É–Ω–µ–π–º–∞–º –∑–¥–µ—Å—å –Ω–µ —Ä–∞–¥—ã\n\n"
            "–ò –∂–º–∏ –∫–Ω–æ–º–ø–æ—á–∫—É <b>–ü–†–ê–í–ò–õ–ê</b>, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ.\n\n"
            "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Å—è @nad_wild @zhurina71 @tsvetovaan üíã\n\n"
            "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!",
            reply_markup=kb,
            disable_web_page_preview=True,
            **extra
        )

@bot.chat_member_handler(func=lambda u: True)
def on_chat_member_update(update: types.ChatMemberUpdated):
    try:
        old = update.old_chat_member.status
        new = update.new_chat_member.status
        user = update.new_chat_member.user
        chat_id = update.chat.id
        joined_now = (old in ("left", "kicked")) and (new in ("member", "restricted"))
        if not joined_now:
            return
        kb = welcome_keyboard(chat_id=chat_id)
        nick = mention(user)
        bot.send_message(
            chat_id,
            f"ü•≥ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {nick}! \n"
            "–ó–¥–µ—Å—å —Ä–æ—Ñ–ª—ã, –º–µ–º—ã, —Ñ–ª–∏—Ä—Ç—ã, –ª–∞–π—Ç–æ–≤–æ–µ –æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤–∑–∞–∏–º–Ω–æ–º —É–≤–∞–∂–¥–µ–Ω–∏–∏ –∏ –æ—Ñ—Ñ–ª–∞–π–Ω-—Ç—É—Å–æ–≤–∫–∏, –µ—Å–ª–∏ –ø–æ–π–º–∞–µ—à—å –Ω–∞—à –≤–∞–π–± ‚ù§Ô∏è\n\n"
            "–ù–∞—á–∏–Ω–∞–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –∂–º–∏ <b>–ê–ù–ö–ï–¢–ê!</b> (–ü–æ—Å–ª–µ –ø–µ—Ä–µ–π–¥–∏ –≤ –ª–∏—á–∫—É —Å –±–æ—Ç–æ–º –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã)\n\n"
            "–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ —Ç—ã –±–µ–∑ –Ω–µ–≥–æ - –ù–æ—É–Ω–µ–π–º–∞–º –∑–¥–µ—Å—å –Ω–µ —Ä–∞–¥—ã\n\n"
            "–ò –∂–º–∏ –∫–Ω–æ–º–ø–æ—á–∫—É <b>–ü–†–ê–í–ò–õ–ê</b>, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ.\n\n"
            "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Å—è @nad_wild @zhurina71 @tsvetovaan üíã\n\n"
            "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!",
            reply_markup=kb,
            disable_web_page_preview=True
        )
    except Exception as e:
        print("chat_member handler error:", e)

@bot.message_handler(func=lambda m: m.text and m.text.lower() in ["—Å—Ç–æ–ø", "stop", "cancel"])
def cancel_form(message: types.Message):
    user_id = message.from_user.id
    if user_id in FORM_STATE:
        FORM_STATE.pop(user_id, None)
        bot.reply_to(message, "–û–∫–µ–π, –∞–Ω–∫–µ—Ç—É –æ—Ç–º–µ–Ω–∏–ª. –•–æ—á–µ—à—å ‚Äî –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ –ø–æ –∫–Ω–æ–ø–∫–µ ¬´–ê–ù–ö–ï–¢–ê¬ª.")
    else:
        bot.reply_to(message, "–°–µ–π—á–∞—Å –∞–Ω–∫–µ—Ç–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞. –ú–æ–∂–µ—à—å –Ω–∞–∂–∞—Ç—å ¬´–ê–ù–ö–ï–¢–ê¬ª –≤ –º–µ–Ω—é.")

@bot.message_handler(func=lambda m: m.chat.type == "private")
def private_flow(message: types.Message):
    user_id = message.from_user.id
    state = FORM_STATE.get(user_id)
    if not state:
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("üìù –ù–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç—É", url=build_deeplink(f"chat_{DEFAULT_CHAT_ID}")))
        bot.reply_to(message, "–•–æ—á–µ—à—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É?", reply_markup=kb)
        return
    state["answers"].append(message.text.strip())
    state["progress"] += 1
    if state["progress"] < len(QUESTIONS):
        ask_next_question(user_id)
    else:
        bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ! –ü—É–±–ª–∏–∫—É—é –∫—Ä–∞—Ç–∫—É—é –∫–∞—Ä—Ç–æ—á–∫—É –≤ —á–∞—Ç ‚ú®")
        publish_form_result(user_id)

# --- START POLLING ---
if __name__ == "__main__":
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    try:
        info = bot.get_webhook_info()
        print("Current webhook url:", getattr(info, "url", ""))
        if info and info.url:
            bot.delete_webhook(drop_pending_updates=True)
            print("Webhook deleted (ok for polling).")
    except Exception as e:
        print("webhook check/delete error:", e)

    print(f"Bot is starting polling as @{bot.get_me().username} ...")
    bot.infinity_polling(
        timeout=30,
        long_polling_timeout=30,
        skip_pending=True,
        allowed_updates=["message", "chat_member", "my_chat_member"]
    )
